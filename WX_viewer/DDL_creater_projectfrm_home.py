"""Subclass of frm_home, which is generated by wxFormBuilder."""

import wx
import Main
from msg_somethigWrong import msg_somethigWrong
import scripts.build_ddl
import os
# Implementing frm_home
class DDL_creater_projectfrm_home( Main.frm_home ):
	def __init__( self, parent ):
		Main.frm_home.__init__( self, parent )

		self.path = ""
		self.sqlite_name = None
		self.postgres_name = None
		self.sql_server_name = None
		self.mysql_name = None

	
	def button_generateOnButtonClick(self, event):

		'''Check validation of parameters.'''
		if not self.validation_check():
			return

		'''Read needed parameters.'''
		create_sequential_primary_keys = self.checkBox_sequentialKeys.Value
		check_me = self.checkBox_CaseSensitivity.Value

		# existing_sqlite_name = self.m_checkBox6.Value
		# existing_postgres_name = self.m_checkBox3.Value
		# existing_sql_server_name = self.m_checkBox4.Value
		# existing_mysql_name = self.m_checkBox5.Value


		param = {'inputFile':self.path, 'outDir':self.outDir, 'is_primaryKey':create_sequential_primary_keys, 'check_me':check_me,
				 'sqlite':self.sqlite_name, 'postgres':self.postgres_name, 'mmsql':self.sql_server_name, 'mysql':self.mysql_name, 'schema':self.textCtrl_SQLiteFileDesc.Value}

		try:
			scripts.build_ddl.main(param)

			msg="Successful creation of the database schemas"

			message = msg_somethigWrong(None)
			message.setMsg(msg)
			message.SetTitle("Success")
			message.ShowModal()
		except Exception as e:
			msg = e.message
			message = msg_somethigWrong(None)
			message.setMsg(msg)
			message.ShowModal()
		# build_ddl.input_file = path;


	def validation_check(self):
		'''
		This function is used to check validation of parameters.
		:return: True if all parameters are valid, otherwise False.
		'''
		from msg_somethigWrong import msg_somethigWrong
		msg = ""
		valid_extension = ['xml']
		self.path = self.filePicker_xmlfile.GetPath()
		self.checkFlage = False

		if not (self.path.split('.')[-1] in valid_extension):
			msg="Please select a valid xml File"
			message = msg_somethigWrong(None)
			message.setMsg(msg)
			message.ShowModal()
			return False


		if self.path == "":
			msg = "Please select input file(*.xml)."
			msg_dlg = msg_somethigWrong(None)
			msg_dlg.setMsg(msg)
			msg_dlg.ShowModal()
			return False
		base = os.path.basename(self.path)
		baseFilename = os.path.splitext(base)[0]

		if self.checkBox_Sqlite.Value:
			self.checkFlage = True
			if self.textCtrl_SqliteFileName.Value == None or self.textCtrl_SqliteFileName.Value == "":
				self.sqlite_name = baseFilename + "_" + "SQLite.sql"
			else:
				self.sqlite_name = self.textCtrl_SqliteFileName.Value
		else:
			self.sqlite_name = None

		if self.m_checkBox3.Value:
			self.checkFlage = True
			if self.textCtrl_PostgresFileName.Value == None or self.textCtrl_PostgresFileName.Value == "":
				self.postgres_name = baseFilename + "_" + "PostgreSQL.sql"
			else:
				self.postgres_name = self.textCtrl_PostgresFileName.Value
		else:
			self.sqlite_name = None

		if self.m_checkBox4.Value:
			self.checkFlage = True
			if self.textCtrl_MSSQLFileName.Value == None or self.textCtrl_MSSQLFileName.Value == "":
				self.sql_server_name = baseFilename + "_" + "MSSQL.sql"
			else:
				self.sql_server_name = self.textCtrl_MSSQLFileName.Value
		else:
			self.sql_server_name = None

		if self.m_checkBox5.Value:
			self.checkFlage = True
			if self.textCtrl_MySQLFileName.Value == None or self.textCtrl_MySQLFileName.Value == "":
				self.mysql_name = baseFilename + "_" + "MySQL.sql"
			else:
				self.mysql_name = self.textCtrl_MySQLFileName.Value
		else:
			self.mysql_name = None

		if not self.checkFlage:
			msg = "Check a schema at least"
			msg_dlg = msg_somethigWrong(None)
			msg_dlg.setMsg(msg)
			msg_dlg.ShowModal()
			return False

		if self.dirPicker_DDLfiles.GetPath() == None or self.dirPicker_DDLfiles.GetPath() == "":
			msg = "Please select out directory."
			msg_dlg = msg_somethigWrong(None)
			msg_dlg.setMsg(msg)
			msg_dlg.ShowModal()
			return False
		else:
			self.outDir = self.dirPicker_DDLfiles.GetPath()

		return True


	def button_cancelOnButtonClick(self, event):
		self.Close()